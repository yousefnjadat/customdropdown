
class custommultiselectdropdown extends StatefulWidget {
  final Function(List<String>) selectedlist;
  final List<String> listofstrings;

  custommultiselectdropdown(
  {required this.selectedlist, required this.listofstrings});

  @override
  createState() {
  return  _custommultiselectdropdownstate();
  }
}

class _custommultiselectdropdownstate extends State<custommultiselectdropdown> {
  List<String> listofselecteditem = [];
  String selectedtext = "";

  String textValue = '';
String setTextValue(){
  var concatenate = StringBuffer();

  for (var element in listofselecteditem) {
    setState(() {
      concatenate.write(element+ (listofselecteditem.length != 1 ? ', ':''));
    });
  }
  textValue = concatenate.toString();
return textValue;
}
  @override
  Widget build(BuildContext context) {
    var size = MediaQuery.of(context).size;
    return Container(
      margin: const EdgeInsets.only(top: 10.0),
      decoration:
      BoxDecoration(border: Border.all(color: Colors.grey)),
      child: ExpansionTile(
        iconColor: Colors.grey,
        title: Text(
          listofselecteditem.isEmpty ? "select" : textValue,
        ),
        children: <Widget>[
          ListView.builder(
            physics: const NeverScrollableScrollPhysics(),
            shrinkWrap: true,
            itemCount: widget.listofstrings.length,
            itemBuilder: (BuildContext context, int index) {
              return Container(
                margin: const EdgeInsets.only(bottom: 8.0),
                child: _viewitem(
                    item: widget.listofstrings[index],
                    selected: (val) {
                      selectedtext = val;
                      if (listofselecteditem.contains(val)) {
                        listofselecteditem.remove(val);
                      } else {
                        listofselecteditem.add(val);
                      }
                      widget.selectedlist(listofselecteditem);
                      setTextValue();
                      setState(() {});
                    },
                    itemselected: listofselecteditem
                        .contains(widget.listofstrings[index])),
              );
            },
          ),
        ],
      ),
    );
  }
}

class _viewitem extends StatelessWidget {
  String item;
  bool itemselected;
  final Function(String) selected;

  _viewitem(
  {required this.item, required this.itemselected, required this.selected});

  @override
  Widget build(BuildContext context) {
  var size = MediaQuery.of(context).size;
  return Padding(
  padding:
  EdgeInsets.only(left: size.width * .032, right: size.width * .098),
  child: Row(
  children: [
  SizedBox(
  height: 24.0,
  width: 24.0,
  child: Checkbox(
  value: itemselected,
  onChanged: (val) {
  selected(item);
  },
  activeColor: Colors.blue,
  ),
  ),
  SizedBox(
  width: size.width * .025,
  ),
  Text(
  item,
  ),
  ],
  ),
  );
  }
}
